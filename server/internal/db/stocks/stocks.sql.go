// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: stocks.sql

package stocks

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addStock = `-- name: AddStock :one
INSERT INTO stocks (
    portfolio_id,user_id,symbol,name,quantity,purchase_price,purchase_date) VALUES ($1,$2,$3,$4,$5,$6,$7)
RETURNING id,portfolio_id,user_id,symbol,name,quantity,purchase_price,purchase_date,created_at,updated_at
`

type AddStockParams struct {
	PortfolioID   uuid.UUID      `json:"portfolio_id"`
	UserID        uuid.UUID      `json:"user_id"`
	Symbol        string         `json:"symbol"`
	Name          string         `json:"name"`
	Quantity      pgtype.Numeric `json:"quantity"`
	PurchasePrice pgtype.Numeric `json:"purchase_price"`
	PurchaseDate  time.Time      `json:"purchase_date"`
}

func (q *Queries) AddStock(ctx context.Context, arg AddStockParams) (Stock, error) {
	row := q.db.QueryRow(ctx, addStock,
		arg.PortfolioID,
		arg.UserID,
		arg.Symbol,
		arg.Name,
		arg.Quantity,
		arg.PurchasePrice,
		arg.PurchaseDate,
	)
	var i Stock
	err := row.Scan(
		&i.ID,
		&i.PortfolioID,
		&i.UserID,
		&i.Symbol,
		&i.Name,
		&i.Quantity,
		&i.PurchasePrice,
		&i.PurchaseDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteStock = `-- name: DeleteStock :exec
DELETE FROM stocks where id=$1 AND user_id=$2 AND portfolio_id=$3
`

type DeleteStockParams struct {
	ID          uuid.UUID `json:"id"`
	UserID      uuid.UUID `json:"user_id"`
	PortfolioID uuid.UUID `json:"portfolio_id"`
}

func (q *Queries) DeleteStock(ctx context.Context, arg DeleteStockParams) error {
	_, err := q.db.Exec(ctx, deleteStock, arg.ID, arg.UserID, arg.PortfolioID)
	return err
}

const updateStock = `-- name: UpdateStock :one
UPDATE stocks
SET
    symbol = COALESCE($4, symbol),
    name = COALESCE($5, name),
    quantity = COALESCE($6, quantity),
    purchase_price = COALESCE($7, purchase_price),
    purchase_date = COALESCE($8, purchase_date),
    updated_at = now()
WHERE id = $1 AND portfolio_id = $2 AND user_id = $3
RETURNING id, portfolio_id, user_id, symbol, name, quantity, purchase_price, purchase_date, created_at, updated_at
`

type UpdateStockParams struct {
	ID            uuid.UUID      `json:"id"`
	PortfolioID   uuid.UUID      `json:"portfolio_id"`
	UserID        uuid.UUID      `json:"user_id"`
	Symbol        string         `json:"symbol"`
	Name          string         `json:"name"`
	Quantity      pgtype.Numeric `json:"quantity"`
	PurchasePrice pgtype.Numeric `json:"purchase_price"`
	PurchaseDate  time.Time      `json:"purchase_date"`
}

func (q *Queries) UpdateStock(ctx context.Context, arg UpdateStockParams) (Stock, error) {
	row := q.db.QueryRow(ctx, updateStock,
		arg.ID,
		arg.PortfolioID,
		arg.UserID,
		arg.Symbol,
		arg.Name,
		arg.Quantity,
		arg.PurchasePrice,
		arg.PurchaseDate,
	)
	var i Stock
	err := row.Scan(
		&i.ID,
		&i.PortfolioID,
		&i.UserID,
		&i.Symbol,
		&i.Name,
		&i.Quantity,
		&i.PurchasePrice,
		&i.PurchaseDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
